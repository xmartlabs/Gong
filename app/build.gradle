buildscript {
    addRepos(repositories)
    dependencies {
        classpath buildscriptDeps.firebaseCrashlyticsPlugin
        classpath buildscriptDeps.snapshotPublisher
    }
}

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "kotlin-kapt"
}

apply from: rootProject.file('scripts/versioning.gradle')
apply from: rootProject.file('scripts/read_properties.gradle')

//if (getEnvVariable('KEYSTORE_FILE') != null) {
    // Avoid Signing not ready issues in Gradle Play Publisher plugin
    apply from: rootProject.file('scripts/snapshot_publish.gradle')
//}

// TODO: Enable when the services json is added
// apply plugin: 'com.google.gms.google-services'

// TODO: Enable Crashlytics
// apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion androidVersions.compileSdk
    buildToolsVersion androidVersions.buildTools

    defaultConfig {
        applicationId "com.xmartlabs.gong"
        minSdkVersion androidVersions.minSdk
        targetSdkVersion androidVersions.targetSdk
        versionCode 1
        versionName ""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        // Used to define some constants like the share preferences's file name.
        buildConfigField 'String', 'APP_NAME', '"Gong"'
    }

    buildFeatures {
        compose true
    }

    signingConfigs {
        release {
            storeFile getEnvVariable('KEYSTORE_FILE') == null ? null : file(getEnvVariable('KEYSTORE_FILE'))
            storePassword getEnvVariable('KEYSTORE_PASSWORD')
            keyAlias getEnvVariable('KEYSTORE_KEY_ALIAS')
            keyPassword getEnvVariable('KEYSTORE_KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (getEnvVariable('KEYSTORE_FILE') != null) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            minifyEnabled getEnvVariable('MINIFY_CODE', false) as Boolean
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "env"
    productFlavors {
        dev {
            buildConfigField 'String', 'API_BASE_URL', getEnvVariable('API_DEV_SERVER_URL')

            dimension "env"
            ext.buildTypeCode = 0
            applicationIdSuffix '.dev'
        }
        prod {
            buildConfigField 'String', 'API_BASE_URL', getEnvVariable('API_PROD_SERVER_URL')

            dimension "env"
            ext.buildTypeCode = 4
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE' // will not include LICENSE file
    }

    lintOptions {
        lintConfig file("lint.xml")
        disable "ObsoleteLintCustomCheck"
        // Timber linter doesn't work with AGP 7.0.0-alpha13 https://github.com/JakeWharton/timber/issues/408
        disable "LogNotTimber", "StringFormatInTimber", "ThrowableNotAtBeginning", "BinaryOperationInTimber",
                "TimberArgCount", "TimberArgTypes", "TimberTagLength", "TimberExceptionLogging"
        fatal 'StopShip'
        warningsAsErrors true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        useIR = true
        languageVersion = "1.5"
        jvmTarget = '1.8'
        freeCompilerArgs += [
                "-XXLanguage:+InlineClasses",
                "-Xallow-result-return-type",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xuse-experimental=kotlin.contracts.ExperimentalContracts",
                "-Xuse-experimental=kotlin.Experimental",
                "-Xuse-experimental=kotlin.time.ExperimentalTime",
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
                "-Xuse-experimental=kotlin.ExperimentalStdlibApi",
        ]
    }
    composeOptions {
        kotlinCompilerExtensionVersion versions.compose
    }
}

dependencies {
    androidTestImplementation deps.androidX.test.junit
    androidTestImplementation deps.androidX.test.espresso

    debugImplementation deps.leakcanary

    implementation deps.androidSwissKnife.core
    implementation deps.androidSwissKnife.dataStore
    implementation deps.androidX.room.coreKtx
    implementation deps.coil
    implementation deps.compose.compiler
    implementation deps.compose.constraintLayout
    implementation deps.compose.foundation
    implementation deps.compose.navigation
    implementation deps.compose.material
    implementation deps.compose.runtime
    implementation deps.compose.tooling
    implementation deps.compose.ui
    implementation deps.compose.viewModel
    implementation deps.firebase.crashlytics
    implementation deps.koin.compose
    implementation deps.kotlin.core
    implementation deps.kotlin.coroutines.core
    implementation deps.okIo
    implementation deps.okhttp3.core
    implementation deps.okhttp3.loggingIntercepror
    implementation deps.okhttp3.ok2CurlInterceptor
    implementation deps.okhttp3.stetho
    implementation deps.okhttp3.urlconnection
    implementation deps.once
    implementation deps.retrofit2.core
    implementation deps.retrofit2.gsonAdapter
    implementation deps.stetho
    implementation deps.timber

    kapt deps.androidX.room.compiler

    testImplementation deps.junit
}
